pipeline {
  agent any

  environment {
    AWS_REGION   = 'us-east-1'
    ECR_ACCOUNT  = '106530302214'
    CLUSTER      = 'devops-challenge-cluster'
    BACKEND_TAG  = "build-${GIT_COMMIT[0..6]}"
    FRONTEND_TAG = "build-${GIT_COMMIT[0..6]}"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Authenticate to AWS & ECR') {
      steps {
        // bind AWS creds for everything below
        withCredentials([usernamePassword(
          credentialsId: 'aws',
          usernameVariable: 'AWS_ACCESS_KEY_ID',
          passwordVariable: 'AWS_SECRET_ACCESS_KEY'
        )]) {
          // ECR login
          sh '''
            aws ecr get-login-password --region $AWS_REGION \
              | docker login \
                  --username AWS \
                  --password-stdin $ECR_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com
          '''
          
          // Build & push backend
          sh '''
            docker build -t backend:${BACKEND_TAG} backend
            docker tag backend:${BACKEND_TAG} $ECR_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/backend:${BACKEND_TAG}
            docker push $ECR_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/backend:${BACKEND_TAG}
          '''

          // Build & push frontend
          sh '''
            docker build -t frontend:${FRONTEND_TAG} frontend
            docker tag frontend:${FRONTEND_TAG} $ECR_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/frontend:${FRONTEND_TAG}
            docker push $ECR_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/frontend:${FRONTEND_TAG}
          '''

          // Terraform apply
          dir('infra') {
            sh '''
              terraform init
              terraform apply -auto-approve \
                -var="backend_image_tag=${BACKEND_TAG}" \
                -var="frontend_image_tag=${FRONTEND_TAG}"
            '''
          }

          // Force ECS redeploy
          sh '''
            aws ecs update-service --cluster $CLUSTER --service backend-service --force-new-deployment --region $AWS_REGION
            aws ecs update-service --cluster $CLUSTER --service frontend-service --force-new-deployment --region $AWS_REGION
          '''
        }
      }
    }

    stage('Smoke Test') {
      steps {
        sh '''
          curl -f http://34.205.29.35/ && \
          curl -f http://44.192.74.201:8080/health
        '''
      }
    }
  }
}
