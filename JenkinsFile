pipeline {
  agent any

  environment {
    AWS_REGION   = 'us-east-1'
    ECR_ACCOUNT  = '106530302214'
    CLUSTER      = 'devops-challenge-cluster'
    BACKEND_TAG  = "build-${GIT_COMMIT[0..6]}"
    FRONTEND_TAG = "build-${GIT_COMMIT[0..6]}"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm  // Pull latest code from GitHub
      }
    }

    stage('Authenticate to AWS & ECR') {
      steps {
        // Bind AWS credentials for Docker and Terraform operations
        withCredentials([usernamePassword(
          credentialsId: 'aws',
          usernameVariable: 'AWS_ACCESS_KEY_ID',
          passwordVariable: 'AWS_SECRET_ACCESS_KEY'
        )]) {
          // Log in to Amazon ECR
          sh '''
            aws ecr get-login-password --region $AWS_REGION \
              | docker login \
                  --username AWS \
                  --password-stdin $ECR_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com
          '''

          // Build & push backend image
          sh '''
            docker build --no-cache -t backend:${BACKEND_TAG} backend
            # Tag and push to the 'lightfeather-backend' ECR repository
            docker tag backend:${BACKEND_TAG} $ECR_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/lightfeather-backend:${BACKEND_TAG}
            docker push $ECR_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/lightfeather-backend:${BACKEND_TAG}
          '''

          // Build & push frontend image with API URL baked in (no cache)
          sh '''
            # Use build-arg so CRA inlines the API URL at build time
            docker build --no-cache \
              --build-arg REACT_APP_API_URL=http://44.192.74.201:8080 \
              -t frontend:${FRONTEND_TAG} \
              frontend

            # Tag and push to the 'lightfeather-frontend' ECR repository
            docker tag frontend:${FRONTEND_TAG} $ECR_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/lightfeather-frontend:${FRONTEND_TAG}
            docker push $ECR_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/lightfeather-frontend:${FRONTEND_TAG}
          '''

          // Apply Terraform to update ECS task definitions
          dir('infra') {
            sh '''
              terraform init
              terraform apply -auto-approve \
                -var="backend_image_tag=${BACKEND_TAG}" \
                -var="frontend_image_tag=${FRONTEND_TAG}"
            '''
          }

          // Force ECS services to deploy new images immediately
          sh '''
            aws ecs update-service --cluster $CLUSTER --service backend-service --force-new-deployment --region $AWS_REGION
            aws ecs update-service --cluster $CLUSTER --service frontend-service --force-new-deployment --region $AWS_REGION
          '''
        }
      }
    }

stage('Smoke Test') {
    steps {
        // Verify frontend and backend endpoints respond successfully THROUGH THE ALB
        sh '''
            echo "--- Testing Frontend via ALB ---"
            curl -fSsv http://devops-challenge-lb-958466084.us-east-1.elb.amazonaws.com/
            
            echo "--- Testing Backend Health via ALB ---"
            curl -fSsv http://devops-challenge-lb-958466084.us-east-1.elb.amazonaws.com:8080/health
        '''
        // Note: The -Ssv flags in curl provide more verbose output for errors, which can be helpful.
        // -f makes curl fail on server errors (HTTP 4xx or 5xx)
        // -s makes curl silent (no progress meter)
        // -S shows errors even with -s
        // -v provides verbose output, including headers
    }
  }
}
