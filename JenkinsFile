pipeline {
    agent any

    environment {
        AWS_REGION   = 'us-east-1'
        ECR_ACCOUNT  = '106530302214'
        CLUSTER      = 'devops-challenge-cluster'
        BACKEND_TAG  = "build-${GIT_COMMIT[0..6]}"
        FRONTEND_TAG = "build-${GIT_COMMIT[0..6]}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Authenticate to AWS & ECR') { // Corrected Stage Name to match your content
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'aws',
                    usernameVariable: 'AWS_ACCESS_KEY_ID',
                    passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                )]) { // Opening brace for withCredentials
                    sh '''
                        aws ecr get-login-password --region $AWS_REGION \
                          | docker login \
                              --username AWS \
                              --password-stdin $ECR_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com
                    '''
                    sh '''
                        docker build --no-cache -t backend:${BACKEND_TAG} backend
                        docker tag backend:${BACKEND_TAG} $ECR_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/lightfeather-backend:${BACKEND_TAG}
                        docker push $ECR_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/lightfeather-backend:${BACKEND_TAG}
                    '''
                    sh '''
                        docker build --no-cache \
                          --build-arg REACT_APP_API_URL=http://44.192.74.201:8080 \
                          -t frontend:${FRONTEND_TAG} \
                          frontend
                        docker tag frontend:${FRONTEND_TAG} $ECR_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/lightfeather-frontend:${FRONTEND_TAG}
                        docker push $ECR_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/lightfeather-frontend:${FRONTEND_TAG}
                    '''
                    dir('infra') { // Opening brace for dir
                        sh '''
                            terraform init
                            terraform apply -auto-approve \
                              -var="backend_image_tag=${BACKEND_TAG}" \
                              -var="frontend_image_tag=${FRONTEND_TAG}"
                        '''
                    } // Closing brace for dir
                    sh '''
                        aws ecs update-service --cluster $CLUSTER --service backend-service --force-new-deployment --region $AWS_REGION
                        aws ecs update-service --cluster $CLUSTER --service frontend-service --force-new-deployment --region $AWS_REGION
                    '''
                } // Closing brace for withCredentials
            }
        } // Closing brace for stage 'Authenticate to AWS & ECR'

        stage('Smoke Test') {
            steps {
                sh '''
                    echo "--- Testing Frontend via ALB ---"
                    curl -fSsv http://devops-challenge-lb-958466084.us-east-1.elb.amazonaws.com/
                    
                    echo "--- Testing Backend Health via ALB ---"
                    curl -fSsv http://devops-challenge-lb-958466084.us-east-1.elb.amazonaws.com:8080/health
                '''
            }
        } // Closing brace for stage 'Smoke Test'
    } // Closing brace for stages
} // Closing brace for pipeline
